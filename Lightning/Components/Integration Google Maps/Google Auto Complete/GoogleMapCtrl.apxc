/************************************ Related List component 

   Author: Lucas Salles   Sp/Brasil - 16/Out/2018
    email: LucasAllesOliveira@gmail.com 
*********************************************************/
public class GoogleAutoSearchCtrl {
    
    @AuraEnabled
    public static Boolean checkContactAddress(String recordId) {       
        Contact contact = [SELECT Id, Address_Line_1__c FROM Contact WHERE Id =: recordId][0];        
        return contact.Address_Line_1__c == null ? true : false;
    }
    
    @AuraEnabled
    public static String getAddressAutoComplete(String input) {       
        String url = 'https://maps.googleapis.com/maps/api/place/autocomplete/json?input=' + EncodingUtil.urlEncode(input, 'UTF-8') + '&key=' + getGoogleMapsAPIKey();                
        return getHttp(url);
    }
    
    @AuraEnabled
    public static Boolean getAddressDetails(String placeId, String recordId) {
            
        String url = 'https://maps.googleapis.com/maps/api/place/details/json?placeid=' + placeId + '&fields=' + getFieldsRequest() + '&key=' + getGoogleMapsAPIKey();

        ResponseMaps responseMaps = ( GoogleAutoSearchCtrl.responseMaps ) JSON.deserialize( getHttp(url), GoogleAutoSearchCtrl.responseMaps.class );        
        
        if(recordId.startsWith('003')){
            return setContactAddress(recordId, responseMaps);
        }
        return false;
    }
    
    public static String getFieldsRequest(){
        return 'address_component,formatted_address,geometry/location,international_phone_number,name,place_id,url,website';
    }
    
    public static String getGoogleMapsAPIKey() {         
        return 'AIzaSyC16LeILROXBdTa9kLrBUZEkvlEKax--dc';        
    }
    
    public static String getHttp(String url) {        
        try {            
            Http http = new Http();
            HttpRequest httpRequest = new HttpRequest();
            httpRequest.setEndpoint(url);
            httpRequest.setMethod('GET');
            HttpResponse response = http.send(httpRequest);
            
            if (response.getStatusCode() == 200)
                return response.getBody(); 
            
            else
                return 'Error ' + response.getStatusCode() + ' : ' + response.getStatus();
            
        } catch (Exception e) {
            return StringUtils.returnExceptionMessage(e.getMessage());
        }
    }  
    
    public static Boolean setContactAddress(String recordId, ResponseMaps responseMaps){
        Contact contact = [SELECT Id, Name, Address_Line_1__c, City__c, Region__c, Country__c, Province_State__c  FROM Contact WHERE Id =: recordid][0];        
        return true;
    }
    
    //Objects
    public class ResponseMaps{
        public ResponseMaps(){}
        
        public List<String> html_attributions {get;set;}
        public Result       result   	      {get;set;}
    }
    
    public class Result{        
        public List<Address_components> address_components {get;set;}
        
        public Geometry geometry 					{get;set;}
        public String   formatted_address 			{get;set;}                
        public String   international_phone_number 	{get;set;}
        public String   name 					  	{get;set;}
        public String   place_id 			      	{get;set;}
        public String   url 						{get;set;}
        public String   website 					{get;set;}
    }
    
    public class Address_components{
        public String 		long_name  {get;set;}
        public String 		short_name {get;set;}
        public List<String> types      {get;set;}
    }
    
    public class Geometry{
        public Location location {get;set;}
    }
    
    public class Location{        
        public Double lat {get;set;}
        public Double lng {get;set;}
    } 
}